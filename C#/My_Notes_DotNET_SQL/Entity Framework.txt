Name : Khatri Pavan D.
Company Name : Textronics.pvt.ltd
Language : Entity Framework
----------------------------------------------------------------------------------------------------------------------------------------
												
											Entity Framework :


It is an open source ORM framework for ADO.NET 
ORM take care of creating database connection and executing as well as taking query result and 
automatically materializing those result as your application objects
"Entity Framework is an Object Relation Mapper that enables .
NET developer to work with a database using .NET objects .
It eliminates the need for most of data access code that developer usually needs to write"

Entity Framework is a part of Data-layer which is responsible to interact with database & Business Layer.

* Entity Framework Architecture : 
Application Layer -> Entity Framework -> database
Entity Framework(object service -> entity client -> data provider)

-> Entity client provides the ability for developers to work against entities in the form of rows 
and columns using entity SQL queries without the need to generate classes to represent conceptual schema.
 Entity Client shows the entity framework layers, which are the core functionality. 
 These layers are called as Entity Data Model.

-> The Storage Layer contains the entire database schema in XML format.
The Entity Layer which is also an XML file defines the entities and relationships.
The Mapping layer is an XML file that maps the entities and relationships defined at 
conceptual layer with actual relationships and tables defined at logical layer.

-> The Metadata services which is also represented in Entity Client provides centralized
 API to access metadata stored Entity, Mapping and Storage layers.

-> Object Services layer is the Object Context, which represents the session 
of interaction between the applications and the data source.



*) WORKFLOW OF ENTITY FRAMEWORK :

1.Domain Model : 
first of all we need to define the model includes defining your domain classes ,
context classes derived from DbContext , and Configuration .EF will perform CRUD 
operation based on your model .

2. To insert data ,ass a domain object to a context and call athe savechanges() method . 
EF API will build an appropriate INSERT command and execute it to database .

3. To read data, execute the LINQ-to-Entities query in your preferred language (C#/VB.NET). 
EF API will convert this query into SQL query for the underlying relational database and execute it.
The result will be transformed into domain (entity) objects and displayed on the UI.

4. To edit or delete data, update or remove entity objects from a context and call 
the SaveChanges() method. EF API will build the appropriate UPDATE or DELETE command 
and execute it to the database.

*) How Entity Framework Works ?

Entity Framework API (EF6 & EF Core) includes the ability to map domain (entity) classes to the database
 schema, translate & execute LINQ queries to SQL, track changes occurred on entities during their lifetime, 
 and save changes to the database.
 
 ENTIY FRAMEWORK API :
 -Maps classes to database schema
 -Translates LINQ to entities Queries to SQL and executes it .
 -Tracks changes
 -Save changes to database.
 
 1. Entity Data Model : it is very first task of EF API to build Entity data model(EDM) .
	EDM is an in-memory representation of entire meta data : Conceptual Model ,Storage Model and mapping between them .
	
	- Conceptual Model : EF builds the conceptual model from your domain classes , context class ,default conventions
	followed in you domain classes  and configuration .
	- storage model : EF builds the storage model for the underlying database schema .
	In code first approach ,this will be inferred from the conceptual model.
	In data-first model it will  be inferred from target database 
	- mapping : EF includes mapping information on how the conceptual model maps to the database schema.
	
*) Querying:
EF API translates LINQ-to-Entities queries to SQL queries for relational databases using EDM and also 
converts results back to entity objects.

*) Saving:
EF API infers INSERT, UPDATE, and DELETE commands based on the state of entities when the SaveChanges() method is called. 
The ChangeTrack keeps track of the states of each entity as and when an action is performed.

*) components of the EF architecture individually.

EDM (Entity Data Model): EDM consists of three main parts - Conceptual model, Mapping and Storage model.

Conceptual Model: The conceptual model contains the model classes and their relationships. 
					This will be independent from your database table design.

Storage Model: The storage model is the database design model which includes tables, 
				views, stored procedures, and their relationships and keys.

Mapping: Mapping consists of information about how the conceptual model is mapped to the storage model.

LINQ to Entities: LINQ-to-Entities (L2E) is a query language used to write queries against the object model. 
				It returns entities, which are defined in the conceptual model. You can use your LINQ skills here.

Entity SQL: Entity SQL is another query language (For EF 6 only) just like LINQ to Entities. 
			However, it is a little more difficult than L2E and the developer will have to learn it separately.

Object Service: Object service is a main entry point for accessing data from the database 
				and returning it back. Object service is responsible for materialization, 
				which is the process of converting data returned from an entity client data provider 	
				(next layer) to an entity object structure.

Entity Client Data Provider: The main responsibility of this layer is to convert LINQ-to-Entities 
				or Entity SQL queries into a SQL query which is understood by the underlying database. It communicates with the ADO.Net data provider which in turn sends or retrieves data from the database.

ADO.Net Data Provider: This layer communicates with the database using standard ADO.Net.
 
*) Context Class in Entity Framework:
-represents a session with the underlying database
-derieved from DbContext class.

The following SchoolContext class is an example of a context class.

public class SchoolContext : DbContext
{
    public SchoolContext()
    {

    } 
    public DbSet<Student> Students { get; set; }
    public DbSet<StudentAddress> StudentAddresses { get; set; }
    public DbSet<Grade> Grades { get; set; }        
} 
In the above example, the SchoolContext class is derived from DbContext, which makes it a context class. 
It also includes an entity set for Student, StudentAddress, and Grade entities.

The context class is used to query or save data to the database. 
It is also used to configure domain classes, database related mappings, change tracking settings, caching, transaction etc.
 
 
*) What is an Entity in Entity Framework?

An entity in Entity Framework is a class in the domain of your application which is included as a DbSet<TEntity>
 type property in the derived context class. EF API maps each entity to a table and each property of an entity 
 to a column in the database.

For example, the following Student, StudentAddress and Grade are domain classes in the school application.

public class Student
{
    public int StudentID { get; set; }
    public string StudentName { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public byte[]  Photo { get; set; }
    public decimal Height { get; set; }
    public float Weight { get; set; }
        
    public StudentAddress StudentAddress { get; set; }------------ reference Navigation
    public Grade Grade { get; set; }------------ reference Navigation
}

public partial class StudentAddress
{
    public int StudentID { get; set; }
    public string Address1 { get; set; }
    public string Address2 { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    
    public Student Student { get; set; }------------ reference Navigation
}

public class Grade
{
    public int GradeId { get; set; }
    public string GradeName { get; set; }
    public string Section { get; set; }

    public ICollection<Student> Students { get; set; }          ------------ Collection Navigation
}          
The above classes become entities when they are included as DbSet<TEntity> properties in a context class 
(the class which derives from DbContext), as shown below.

public class SchoolContext : DbContext
{
    public SchoolContext()
    {

    }

    public DbSet<Student> Students { get; set; }
    public DbSet<StudentAddress> StudentAddresses { get; set; }
    public DbSet<Grade> Grades { get; set; }
}
In the above context class, Students, StudentAddresses, and Grades properties of type DbSet<TEntity>
are called entity sets. The Student, StudentAddress, and Grade are entities (also known as entity types).

-> An Entity can include two types of properties: Scalar Properties and Navigation Properties.
1] Scalar Property:
The primitive type properties are called scalar properties. A scalar property stores the actual data.
a scalar property maps to a single column in the database table.
2] Navigation Property:
The navigation property represents a relationship to another entity.

-> There are two types of navigation properties: Reference Navigation and Collection Navigation
a] Reference Navigation Property:
If an entity includes a property of entity type, it is called a Reference Navigation Property. 
It represents multiplicity of one (1).
b] Collection Navigation Property:
If an entity includes a property of collection type, it is called a collection navigation property. 
It represents multiplicity of many (*). 

*) Types of Entities in Entity Framework:
There are two types of Entities in Entity Framework: POCO Entities and Dynamic Proxy Entities.
1. POCO Entities(Plain old CLR object) :
A POCO entity is a class that doesn't depend on any framework-specific base class. It is like any other normal 
.NET CLR class, which is why it is called "Plain Old CLR Objects".

POCO entities are supported in both EF 6 and EF Core.

These POCO entities (also known as persistence-ignorant objects) support most of the same query,
 insert, update, and delete behaviors as entity types that are generated by the Entity Data Model. 
 The following is an example of Student POCO entity.

public class Student
{
    public int StudentID { get; set; }
    public string StudentName { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public byte[]  Photo { get; set; }
    public decimal Height { get; set; }
    public float Weight { get; set; }
        
    public StudentAddress StudentAddress { get; set; }
    public Grade Grade { get; set; }
}

2. Dynamic Proxy Entities (POCO proxy):
Dynamic Proxy is a runtime proxy class which wraps POCO entity. Dynamic proxy entities allow lazy loading.
Note: Dynamic proxy entities are only supported in EF 6. EF Core 2.0 does not support them yet.

A POCO entity should meet the following requirements to become a POCO proxy:
-A POCO class must be declared with public access.
-A POCO class must not be sealed (NotInheritable in Visual Basic).
-A POCO class must not be abstract (MustInherit in Visual Basic).
-Each navigation property must be declared as public, virtual.
-Each collection property must be ICollection<T>.
-The ProxyCreationEnabled option must NOT be false (default is true) in context class.

The following POCO entity meets all of the above requirements to become a dynamic proxy entity at runtime.

public class Student
{
    public int StudentID { get; set; }
    public string StudentName { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public byte[]  Photo { get; set; }
    public decimal Height { get; set; }
    public float Weight { get; set; }
        
    public virtual StudentAddress StudentAddress { get; set; }
    public virtual Grade Grade { get; set; }
}
 
*) Entity States in Entity Framework:
EF API maintains the state of each entity during an its lifetime. Each entity has a state based on the operation performed on it 
via the context class. The entity state represented by an en-um System.Data.Entity.EntityState in EF 6 and 
Microsoft.EntityFrameworkCore.EntityState in EF Core with the following values:

1.Added
2.Modified
3.Deleted
4.Unchanged
5.Detached

The Context not only holds the reference to all the entity objects as soon as retrieved from the database, 
but also keeps track of entity states and maintains modifications made to the properties of the entity. 
This feature is known as Change Tracking.

The change in entity state from the Unchanged to the Modified state is the only state that's automatically handled by the context. 
All other changes must be made explicitly using proper methods of DbContext or DbSet. (You will learn about these methods in EF 6 
and EF Core sections.)

EF API builds and executes the INSERT, UPDATE, and DELETE commands based on the state of an entity when the context.SaveChanges() 
method is called. It executes the INSERT command for the entities with Added state, the UPDATE command for the entities with 
Modified state and the DELETE command for the entities in Deleted state. 

*) Development Approaches with Entity Framework:

 1.Database-First :
 In the database-first development approach, you generate the context and entities 
 for the existing database using EDM wizard integrated in Visual Studio or executing EF commands.
 EF 6 supports the database-first approach extensively.

 2.Code-First : 
 Use this approach when you do not have an existing database for your application. In the code-first approach,  
 you start writing your entities (domain classes) and context class first and then create the database from these
 classes using migration commands.
 Developers who follow the Domain-Driven Design (DDD) principles, prefer to begin with coding their domain classes
 first and then generate the database required to persist their data.

 3.Model-First
 In the model-first approach, you create entities, relationships, and inheritance hierarchies directly on the visual
 designer integrated in Visual Studio and then generate entities, the context class, and the database script from your visual model.
 
*) PERSISTANCE IN ENTITY FRAMEWORK:

There are two scenarios when persisting (saving) an entity to the database using Entity Framework: 
-The Connected Scenario  
-The Disconnected Scenario.

1] Connected Scenario:
In the connected scenario, the same instance of the context class (derived from DbContext)
 is used in retrieving and saving entities. 
It keeps track of all entities during its lifetime. 
This is useful in windows applications with the local database or the database on the same network.

2] Disconnected Scenario:
In the disconnected scenario, different instances of the context are used to retrieve and save entities to the database. 
An instance of the context is disposed after retrieving data and a new instance is created to save entities to the database. 
  
------------------------------------------------------------------------------------------------------------------------------------
													CODE - FIRST APPROACH.
													
COde first is mainly use full in Domain driven approach 	
In domain driven approach we focus on our application and start creating class for our domain entity rather than design the database
first and code later.
EF API will create your database based on your classes and configuration.

WORKFLOW :

- Create and modify Domain Classes.
- Configure your domain classes using Fluent-API or data annotation attributes
- Create or update the database schema using automated migration or code-based migration.


 

 
  
 
 
 
 
 
 
 


